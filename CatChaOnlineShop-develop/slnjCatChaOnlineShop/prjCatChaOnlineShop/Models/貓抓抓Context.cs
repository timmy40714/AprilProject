// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace prjCatChaOnlineShop.Models;

public partial class 貓抓抓Context : DbContext
{
    public 貓抓抓Context()
    {
    }

    public 貓抓抓Context(DbContextOptions<貓抓抓Context> options)
        : base(options)
    {
    }

    public virtual DbSet<ShopCommonAddressData> ShopCommonAddressData { get; set; }

    public virtual DbSet<ShopCouponTotal> ShopCouponTotal { get; set; }

    public virtual DbSet<ShopMemberCouponData> ShopMemberCouponData { get; set; }

    public virtual DbSet<ShopMemberInfo> ShopMemberInfo { get; set; }

    public virtual DbSet<ShopOrderDetailTable> ShopOrderDetailTable { get; set; }

    public virtual DbSet<ShopOrderStatusData> ShopOrderStatusData { get; set; }

    public virtual DbSet<ShopOrderTotalTable> ShopOrderTotalTable { get; set; }

    public virtual DbSet<ShopPaymentMethodData> ShopPaymentMethodData { get; set; }

    public virtual DbSet<ShopProductCategory> ShopProductCategory { get; set; }

    public virtual DbSet<ShopProductImageTable> ShopProductImageTable { get; set; }

    public virtual DbSet<ShopProductTotal> ShopProductTotal { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=貓抓抓;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ShopCommonAddressData>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK_Shop.常用地址資料表");

            entity.ToTable("Shop.Common Address Data");

            entity.Property(e => e.AddressId).HasColumnName("Address ID");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.RecipientAddress).HasColumnName("Recipient Address");
            entity.Property(e => e.RecipientName)
                .HasMaxLength(50)
                .HasColumnName("Recipient Name");
            entity.Property(e => e.RecipientPhone)
                .HasMaxLength(50)
                .HasColumnName("Recipient Phone");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopCommonAddressData)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.常用地址資料表_Shop.會員資訊");
        });

        modelBuilder.Entity<ShopCouponTotal>(entity =>
        {
            entity.HasKey(e => e.CouponId).HasName("PK_Shop.優惠券總表");

            entity.ToTable("Shop.Coupon Total");

            entity.Property(e => e.CouponId).HasColumnName("Coupon ID");
            entity.Property(e => e.CouponContent).HasColumnName("Coupon Content");
            entity.Property(e => e.CouponName)
                .HasMaxLength(50)
                .HasColumnName("Coupon Name");
            entity.Property(e => e.ExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("Expiry Date");
            entity.Property(e => e.TotalQuantity).HasColumnName("Total Quantity");
        });

        modelBuilder.Entity<ShopMemberCouponData>(entity =>
        {
            entity.HasKey(e => e.MemberCouponDataId).HasName("PK_Shop.會員折價券資料表_1");

            entity.ToTable("Shop.Member Coupon Data");

            entity.Property(e => e.MemberCouponDataId).HasColumnName("Member Coupon Data ID");
            entity.Property(e => e.CouponId).HasColumnName("Coupon ID");
            entity.Property(e => e.CouponStatusId).HasColumnName("Coupon Status ID");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");

            entity.HasOne(d => d.Coupon).WithMany(p => p.ShopMemberCouponData)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK_Shop.會員折價券資料表_Shop.優惠券總表");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopMemberCouponData)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.會員折價券資料表_Shop.會員資訊");
        });

        modelBuilder.Entity<ShopMemberInfo>(entity =>
        {
            entity.HasKey(e => e.MemberId).HasName("PK_Shop.會員資訊");

            entity.ToTable("Shop.Member Info");

            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.Birthday).HasColumnType("date");
            entity.Property(e => e.CatCoinQuantity).HasColumnName("Cat Coin Quantity");
            entity.Property(e => e.CharacterName)
                .HasMaxLength(50)
                .HasColumnName("Character Name");
            entity.Property(e => e.FavoriteId).HasColumnName("Favorite ID");
            entity.Property(e => e.Gender).HasMaxLength(50);
            entity.Property(e => e.LastLoginTime)
                .HasColumnType("datetime")
                .HasColumnName("Last Login Time");
            entity.Property(e => e.LevelId).HasColumnName("Level ID");
            entity.Property(e => e.LoyaltyPoints).HasColumnName("Loyalty Points");
            entity.Property(e => e.MemberAccount)
                .HasMaxLength(50)
                .HasColumnName("Member Account");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(10)
                .HasColumnName("Phone Number");
            entity.Property(e => e.RegistrationTime)
                .HasColumnType("datetime")
                .HasColumnName("Registration Time");
        });

        modelBuilder.Entity<ShopOrderDetailTable>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId).HasName("PK_Shop.訂單明細表");

            entity.ToTable("Shop.Order Detail Table");

            entity.Property(e => e.OrderDetailId).HasColumnName("Order Detail ID");
            entity.Property(e => e.OrderId).HasColumnName("Order ID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.ProductQuantity).HasColumnName("Product Quantity");

            entity.HasOne(d => d.Order).WithMany(p => p.ShopOrderDetailTable)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_Shop.Order Detail Table_Shop.Order Total Table");

            entity.HasOne(d => d.Product).WithMany(p => p.ShopOrderDetailTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Shop.Order Detail Table_Shop.Product Total");
        });

        modelBuilder.Entity<ShopOrderStatusData>(entity =>
        {
            entity.HasKey(e => e.OrderStatusId).HasName("PK_Shop.訂單狀態資料表");

            entity.ToTable("Shop.Order Status Data");

            entity.Property(e => e.OrderStatusId).HasColumnName("Order Status ID");
            entity.Property(e => e.StatusName).HasColumnName("Status Name");
        });

        modelBuilder.Entity<ShopOrderTotalTable>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK_Orders");

            entity.ToTable("Shop.Order Total Table");

            entity.Property(e => e.OrderId).HasColumnName("Order ID");
            entity.Property(e => e.AddressId).HasColumnName("Address ID");
            entity.Property(e => e.CouponId).HasColumnName("Coupon ID");
            entity.Property(e => e.LastUpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("Last Update Time");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.OrderCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Order Creation Date");
            entity.Property(e => e.OrderStatusId).HasColumnName("Order Status ID");
            entity.Property(e => e.PaymentMethodId).HasColumnName("Payment Method ID");
            entity.Property(e => e.RecipientAddress).HasColumnName("Recipient Address");
            entity.Property(e => e.RecipientName).HasColumnName("Recipient Name");
            entity.Property(e => e.RecipientPhone)
                .HasMaxLength(10)
                .HasColumnName("Recipient Phone");

            entity.HasOne(d => d.Address).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_Shop.Order Total Table_Shop.Common Address Data");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.訂單總表_Shop.會員資訊");

            entity.HasOne(d => d.OrderStatus).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.OrderStatusId)
                .HasConstraintName("FK_Shop.訂單總表_Shop.訂單狀態資料表");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("FK_Shop.訂單總表_Shop.付款方式資料表");
        });

        modelBuilder.Entity<ShopPaymentMethodData>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId).HasName("PK_Shop.付款方式資料表");

            entity.ToTable("Shop.Payment Method Data");

            entity.Property(e => e.PaymentMethodId).HasColumnName("Payment Method ID");
            entity.Property(e => e.PaymentMethodName).HasColumnName("Payment Method Name");
        });

        modelBuilder.Entity<ShopProductCategory>(entity =>
        {
            entity.HasKey(e => e.ProductCategoryId).HasName("PK_Products.Categories");

            entity.ToTable("Shop.Product Category");

            entity.Property(e => e.ProductCategoryId).HasColumnName("Product Category ID");
            entity.Property(e => e.CategoryDescription).HasColumnName("Category Description");
            entity.Property(e => e.CategoryName)
                .HasMaxLength(50)
                .HasColumnName("Category Name");
        });

        modelBuilder.Entity<ShopProductImageTable>(entity =>
        {
            entity.HasKey(e => e.ProductImageId).HasName("PK_Shop.商品圖片表");

            entity.ToTable("Shop.Product Image Table");

            entity.Property(e => e.ProductImageId).HasColumnName("Product Image ID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.ProductPhoto).HasColumnName("Product Photo");

            entity.HasOne(d => d.Product).WithMany(p => p.ShopProductImageTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Products.Image_Products");
        });

        modelBuilder.Entity<ShopProductTotal>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK_Products");

            entity.ToTable("Shop.Product Total");

            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.ProductCategoryId).HasColumnName("Product Category ID");
            entity.Property(e => e.ProductDescription).HasColumnName("Product Description");
            entity.Property(e => e.ProductName)
                .HasMaxLength(50)
                .HasColumnName("Product Name");
            entity.Property(e => e.ProductPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Product Price");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("date")
                .HasColumnName("Release Date");
            entity.Property(e => e.RemainingQuantity).HasColumnName("Remaining Quantity");
            entity.Property(e => e.Size).HasMaxLength(50);
            entity.Property(e => e.SupplierId).HasColumnName("Supplier ID");
            entity.Property(e => e.Weight).HasMaxLength(50);

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.ShopProductTotal)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("FK_Products_Products.Categories");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}